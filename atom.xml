<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UniverseFeeler</title>
  <subtitle>Feeler</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://universefeeler.github.io/"/>
  <updated>2016-07-28T15:21:07.605Z</updated>
  <id>http://universefeeler.github.io/</id>
  
  <author>
    <name>universefeeler</name>
    <email>872977471@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/30/MySQL%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E5%86%85%E8%81%94%E3%80%81%E5%B7%A6%E8%81%94%E3%80%81%E5%8F%B3%E8%81%94%E3%80%81%E5%85%A8%E8%81%94/"/>
    <id>http://universefeeler.github.io/2016/07/30/MySQL联合查询语法内联、左联、右联、全联/</id>
    <published>2016-07-30T15:07:15.435Z</published>
    <updated>2016-07-28T15:21:07.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL联合查询语法内联、左联、右联、全联"><a href="#MySQL联合查询语法内联、左联、右联、全联" class="headerlink" title="MySQL联合查询语法内联、左联、右联、全联"></a>MySQL联合查询语法内联、左联、右联、全联</h1><ol>
<li><strong>内联 inner join</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1, T3 <span class="keyword">where</span> T1.userid = T3.userid</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">inner</span> <span class="keyword">join</span> T3 <span class="keyword">on</span> T1.userid=T3.userid</div></pre></td></tr></table></figure>
<p>两者等同，后者效率略高<br>显示表T1、T2同时满足条件的行</p>
<ol>
<li><strong>左联 left outer join</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> T2 <span class="keyword">on</span> T1.userid = T2.userid</div></pre></td></tr></table></figure>
<p>显示左表T1中的所有行，并把右表T2中符合条件加到左表T1中</p>
<ol>
<li><strong>右联right outer join</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> T2 <span class="keyword">on</span> T1.userid = T2.userid</div></pre></td></tr></table></figure>
<p>显示右表T2中的所有行，并把左表T1中符合条件加到右表T2中</p>
<ol>
<li><strong>全联full outer join</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> T2 <span class="keyword">on</span> T1.userid = T2.userid</div></pre></td></tr></table></figure>
<p>显示左表T1、右表T2两边中的所有行，即把左联结果表 + 右联结果表组合在一起，然后过滤掉重复的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL联合查询语法内联、左联、右联、全联&quot;&gt;&lt;a href=&quot;#MySQL联合查询语法内联、左联、右联、全联&quot; class=&quot;headerlink&quot; title=&quot;MySQL联合查询语法内联、左联、右联、全联&quot;&gt;&lt;/a&gt;MySQL联合查询语法内联、左联、右联、
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/30/Java%E4%B8%AD%E9%81%8D%E5%8E%86Map%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://universefeeler.github.io/2016/07/30/Java中遍历Map的几种方法/</id>
    <published>2016-07-30T15:07:15.435Z</published>
    <updated>2016-07-28T13:39:37.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中遍历Map的几种方法"><a href="#Java中遍历Map的几种方法" class="headerlink" title="Java中遍历Map的几种方法"></a>Java中遍历Map的几种方法</h1><ol>
<li><strong>for 循环</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry:map.entrySet())&#123;    </div><div class="line">     System.out.println(entry.getKey()+<span class="string">"---&gt;"</span>+entry.getValue());    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>Iterator 迭代</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Set set = map.entrySet();         </div><div class="line">Iterator i = set.iterator();         </div><div class="line"><span class="keyword">while</span>(i.hasNext())&#123;      </div><div class="line">     Map.Entry&lt;String, String&gt; entry1=(Map.Entry&lt;String, String&gt;)i.next();    </div><div class="line">     System.out.println(entry1.getKey()+<span class="string">"=="</span>+entry1.getValue());    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>keySet()迭代</strong> </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterator it=map.keySet().iterator();    </div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;    </div><div class="line">     String key;    </div><div class="line">     String value;    </div><div class="line">     key=it.next().toString();    </div><div class="line">     value=map.get(key);    </div><div class="line">     System.out.println(key+<span class="string">"--"</span>+value);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>entrySet()迭代</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Iterator it=map.entrySet().iterator();     </div><div class="line">String key;           </div><div class="line">String value;    </div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;    </div><div class="line">        Map.Entry entry = (Map.Entry)it.next();           </div><div class="line">        key=entry.getKey().toString();           </div><div class="line">        value=entry.getValue().toString();           </div><div class="line">        System.out.println(key+<span class="string">"===="</span>+value);                     </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java中遍历Map的几种方法&quot;&gt;&lt;a href=&quot;#Java中遍历Map的几种方法&quot; class=&quot;headerlink&quot; title=&quot;Java中遍历Map的几种方法&quot;&gt;&lt;/a&gt;Java中遍历Map的几种方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;for 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/30/Java%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6serialVersionUID%E6%B7%B1%E5%85%A5/"/>
    <id>http://universefeeler.github.io/2016/07/30/Java的序列化机制serialVersionUID深入/</id>
    <published>2016-07-30T15:07:15.435Z</published>
    <updated>2016-07-28T15:42:47.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java的序列化机制serialVersionUID深入"><a href="#Java的序列化机制serialVersionUID深入" class="headerlink" title="Java的序列化机制serialVersionUID深入"></a>Java的序列化机制serialVersionUID深入</h1><ol>
<li><p><strong>作用</strong><br>Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)。</p>
</li>
<li><p><strong>生成方式</strong><br><strong>1)</strong> 一个是默认的1L，比如：private static final long serialVersionUID = 1L;<br><strong>2)</strong>  一个是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：        private static final   long     serialVersionUID = xxxxL;</p>
</li>
</ol>
<blockquote>
<p>当你一个类实现了Serializable接口，如果没有显示的定义serialVersionUID，Eclipse会提供这个      提示功能告诉你去定义 。在Eclipse中点击类中warning的图标一下，Eclipse就会      自动给定两种生成的方式。如果不想定义它，在Eclipse的设置中也       可以把它关掉的，设置如下：         Window ==&gt; Preferences ==&gt; Java ==&gt; Compiler ==&gt; Error/Warnings ==&gt;         Potential programming problems         将Serializable class without serialVersionUID的warning改成ignore即可。当实现java.io.Serializable接口的实体（类）没有显式地定义一个名为serialVersionUID，类型为long的变量时，Java序列化机制会根据编译的class(它通过类名，方法名等诸多因素经过计算而得，理论上是一一映射的关系，也就是唯一的)自动生成一个serialVersionUID作序列化版本比较用，这种情况下，如果class文件(类名,方法等)没有发生变化(增加空格,换行,增加注释,等等),就算再编译多次,serialVersionUID也不会变化的.</p>
</blockquote>
<ol>
<li><strong>关键问题</strong></li>
</ol>
<blockquote>
<p>问题一:假设有A端和B端,如果2处的serialVersionUID不一致,会产生什么错误呢?</p>
</blockquote>
<p>答案:</p>
<p>1)先执行测试类SerialTest,然后修改serialVersion值(或注释掉serialVersion并编译),再执行测试类DeserialTest,报错:</p>
<p>java.io.InvalidClassException: com.test.serializable.Serial; local class incompatible: stream classdesc serialVersionUID = 1, local class serialVersionUID = 11</p>
<p>2)A端和B端都没显示的写serialVersionUID,实体类没有改动(如果class文件(类名,方法明等)没有发生变化(增加空格,换行,增加注释,等等),).序列化,反序列化正常.</p>
<blockquote>
<p>问题二:假设2处serialVersionUID一致,如果A端增加一个字段,B端不变,会是什么情况呢?</p>
</blockquote>
<p>答案:<br> 序列化,反序列化正常,A端增加的字段丢失(被B端忽略).</p>
<blockquote>
<p>问题三:假设2处serialVersionUID一致,如果B段增加一个字段,A端不变,会是什么情况呢?</p>
</blockquote>
<p>答案:<br> 序列化,反序列化正常,B端新增加的int字段被赋予了默认值0.</p>
<blockquote>
<p>问题四:假设2处serialVersionUID一致,如果A端减少一个字段,B端不变,会是什么情况呢?</p>
</blockquote>
<p>答案:<br>序列化,反序列化正常,B端字段多余A端,B端多出的字段被赋予对应类型的默认值</p>
<blockquote>
<p>问题五:假设2处serialVersionUID一致,如果B端减少一个字段,A端不变,会是什么情况呢?</p>
</blockquote>
<p>答案:<br>序列化,反序列化正常,A端多余的字段丢失(被B端忽略).</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java的序列化机制serialVersionUID深入&quot;&gt;&lt;a href=&quot;#Java的序列化机制serialVersionUID深入&quot; class=&quot;headerlink&quot; title=&quot;Java的序列化机制serialVersionUID深入&quot;&gt;&lt;/a&gt;Ja
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/30/MySQL%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/"/>
    <id>http://universefeeler.github.io/2016/07/30/MySQL聚集索引和非聚集索引/</id>
    <published>2016-07-30T15:07:15.435Z</published>
    <updated>2016-07-28T15:59:15.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL聚集索引和非聚集索引"><a href="#MySQL聚集索引和非聚集索引" class="headerlink" title="MySQL聚集索引和非聚集索引"></a>MySQL聚集索引和非聚集索引</h1><ol>
<li><strong>聚集索引</strong></li>
</ol>
<p>一种索引，该索引中键值的逻辑顺序决定了表中相应行的物理顺序。<br> 　　聚集索引确定表中数据的物理顺序。聚集索引类似于电话簿，后者按姓氏排列数据。由于聚集索引规定数据在表中的物理存储顺序，因此一个表只能包含一个聚集索引。但该索引可以包含多个列（组合索引），就像电话簿按姓氏和名字进行组织一样。<br> 　　聚集索引对于那些经常要搜索范围值的列特别有效。使用聚集索引找到包含第一个值的行后，便可以确保包含后续索引值的行在物理相邻。例如，如果应用程序执行 的一个查询经常检索某一日期范围内的记录，则使用聚集索引可以迅速找到包含开始日期的行，然后检索表中所有相邻的行，直到到达结束日期。这样有助于提高此 类查询的性能。同样，如果对从表中检索的数据进行排序时经常要用到某一列，则可以将该表在该列上聚集（物理排序），避免每次查询该列时都进行排序，从而节 省成本。
 　　</p>
<ol>
<li><strong>非聚集索引</strong><br>一种索引，该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。</li>
</ol>
<p><strong>通俗解释</strong><br>实际上，您可以把索引理解为一种特殊的目录。微软的SQL SERVER提供了两种索引：聚集索引（clustered index，也称聚类索引、簇集索引）和非聚集索引（nonclustered index，也称非聚类索引、非簇集索引）。下面，我们举例来说明一下聚集索引和非聚集索引的区别：<br>    　　其实，我们的汉语字典的正文本身就是一个聚集索引。比如，我们要查“安”字，就会很自然地翻开字典的前几页，因为“安”的拼音是“an”，而按照拼音排序汉字的字典是以英文字母“a”开头并以“z”结尾的，那么“安”字就自然地排在字典的前部。如果您翻完了所有以“a”开头的部分仍然找不到这个字，那么就说明您的字典中没有这个字；同样的，如果查“张”字，那您也会将您的字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说，字典的正文部分本身就是一个目录，您不需要再去查其他目录来找到您需要找的内容。我们把这种正文内容本身就是一种按照一定规则排列的目录称为“聚集索引”。<br>    　　如果您认识某个字，您可以快速地从自动中查到这个字。但您也可能会遇到您不认识的字，不知道它的发音，这时候，您就不能按照刚才的方法找到您要查的字，而需要去根据“偏旁部首”查到您要找的字，然后根据这个字后的页码直接翻到某页来找到您要找的字。但您结合“部首目录”和“检字表”而查到的字的排序并不是真正的正文的排序方法，比如您查“张”字，我们可以看到在查部首之后的检字表中“张”的页码是672页，检字表中“张”的上面是“驰”字，但页码却是63页，“张”的下面是“弩”字，页面是390页。很显然，这些字并不是真正的分别位于“张”字的上下方，现在您看到的连续的“驰、张、弩”三字实际上就是他们在非聚集索引中的排序，是字典正文中的字在非聚集索引中的映射。我们可以通过这种方式来找到您所需要的字，但它需要两个过程，先找到目录中的结果，然后再翻到您所需要的页码。我们把这种目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚集索引”。<br>    　　通过以上例子，我们可以理解到什么是“聚集索引”和“非聚集索引”。进一步引申一下，我们可以很容易的理解：<strong>每个表只能有一个聚集索引，因为目录只能按照一种方法进行排序</strong>。</p>
<p><strong>注意事项</strong></p>
<ol>
<li>索引有助于提高检索性能，但过多或不当的索引也会导致系统低效。因为用户在表中每加进一个索引，数据库就要做更多的工作。过多的索引甚至会导致<strong>索引碎片</strong>。</li>
<li>建立聚集索引，并且在where中作为查询条件时才会有效，默认的主键索然是索引，但是很少作为查询条件，所以并不能明显提高查询速度。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL聚集索引和非聚集索引&quot;&gt;&lt;a href=&quot;#MySQL聚集索引和非聚集索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL聚集索引和非聚集索引&quot;&gt;&lt;/a&gt;MySQL聚集索引和非聚集索引&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;聚集索引
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/25/%E5%88%A9%E7%94%A8phoenix%E6%93%8D%E4%BD%9Chbase%E4%B9%8Bshell%E4%BD%BF%E7%94%A8%E4%B8%87%E8%83%BD%E5%85%A5%E5%8F%A3/"/>
    <id>http://universefeeler.github.io/2016/07/25/利用phoenix操作hbase之shell使用万能入口/</id>
    <published>2016-07-25T16:23:05.980Z</published>
    <updated>2016-07-25T14:33:25.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用phoenix操作hbase之shell使用万能入口"><a href="#利用phoenix操作hbase之shell使用万能入口" class="headerlink" title="利用phoenix操作hbase之shell使用万能入口"></a>利用phoenix操作hbase之shell使用万能入口</h1><blockquote>
<p>通过phoenix来执行hbase实际上不是那么的爽，至少不像操作MySQL shell的那般流畅感，还是因为我们更多的是在用MySQL</p>
</blockquote>
<p>那么该怎么办呢？</p>
<p>这里有两个神器（当然一切前提是你已经正确安装了phoenix client）</p>
<ol>
<li>撬开大门命令<strong>hbased</strong></li>
</ol>
<pre><code>经过第一步就应该进入 phoenix shell环境了
</code></pre><ol>
<li>在环境中输入帮助命令<strong>help</strong></li>
</ol>
<p>好多命令，为啥前面要加”!”,很多又不加！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用phoenix操作hbase之shell使用万能入口&quot;&gt;&lt;a href=&quot;#利用phoenix操作hbase之shell使用万能入口&quot; class=&quot;headerlink&quot; title=&quot;利用phoenix操作hbase之shell使用万能入口&quot;&gt;&lt;/a&gt;利用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/25/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E4%B9%8B301%20VS%20302/"/>
    <id>http://universefeeler.github.io/2016/07/25/HTTP状态码之301 VS 302/</id>
    <published>2016-07-25T16:23:05.980Z</published>
    <updated>2016-07-25T16:06:04.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP状态码之301-VS-302"><a href="#HTTP状态码之301-VS-302" class="headerlink" title="HTTP状态码之301 VS 302"></a>HTTP状态码之301 VS 302</h1><p><strong>标准说法</strong></p>
<p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于：<br>301 redirect: 301 代表永久性转移(Permanently Moved)。<br>302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p>
<p><strong>现实差异</strong></p>
<p>301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方</p>
<p>302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊。<br>301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存在了，搜索引擎就会把网页B当作唯一有效目标。<br>301的好处是:<br>第一，   没有网址规范化问题。<br>第二，   也很重要的，网页A的PR网页级别会传到网页B。</p>
<p><strong>网址劫持</strong><br>302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。<br>实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。<br>问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。<br>由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP状态码之301-VS-302&quot;&gt;&lt;a href=&quot;#HTTP状态码之301-VS-302&quot; class=&quot;headerlink&quot; title=&quot;HTTP状态码之301 VS 302&quot;&gt;&lt;/a&gt;HTTP状态码之301 VS 302&lt;/h1&gt;&lt;p&gt;&lt;stron
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/25/Cookie%E4%B8%ADmaxAge%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://universefeeler.github.io/2016/07/25/Cookie中maxAge深入理解/</id>
    <published>2016-07-25T16:23:05.980Z</published>
    <updated>2016-07-25T15:48:24.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie中maxAge深入理解"><a href="#Cookie中maxAge深入理解" class="headerlink" title="Cookie中maxAge深入理解"></a>Cookie中maxAge深入理解</h1><p><strong>标准函数:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxAge</span><span class="params">(<span class="keyword">int</span> expiry)</span></span></div></pre></td></tr></table></figure>
<p><strong>官方文档:</strong><br>Sets the maximum age of the cookie in <strong>seconds</strong>.</p>
<p>A <strong>positive</strong> valueindicates that the cookie will expire after that many seconds have passed. Note that the value is the maximum age when the cookie will expire, not the cookie’s current age.</p>
<p>A <strong>negative</strong> value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.<br>Parameters: expiry – an integer specifying the maximum age of the cookie in seconds; if negative, means the cookie is not stored; if zero, deletes the cookie</p>
<p><strong>实用解释</strong></p>
<ol>
<li>不设置时，默认值是-1，表示关闭浏览器，cookie就会消失。</li>
<li><p>正数，表示从现在开始，即将过期的seconds。表示此cookie从创建到过期所能存在的时间，以秒为单位，此cookie会存储到客户端电脑，以cookie文件形式保存，不论关闭浏览器或关闭电脑，直到时间到才会过期。</p>
<blockquote>
<p>例如：5年，cookie.setMaxAge(5<em>365</em>24<em>60</em>60)，这个和永不过期差不多，为什么？因为没有一个值可以直接表示永不过期，所以只能设置一个很大的值来表示永不过期。</p>
</blockquote>
</li>
<li><p>如果maxAge为负数，则表示该Cookie仅在本浏览器窗口以及本窗口打开的子窗口内有效，关闭窗口后该Cookie即失效。maxAge为负数的Cookie，为临时性Cookie，不会被持久化，不会被写到Cookie文件中。Cookie信息保存在浏览器内存中，因此关闭浏览器该Cookie就消失了。</p>
</li>
<li>maxAge为0，则表示删除该Cookie。Cookie机制没有提供删除Cookie的方法，因此通过设置该Cookie即时失效实现删除Cookie的效果。失效的Cookie会被浏览器从Cookie文件或者内存中删除。</li>
</ol>
<p><strong>重点Tips</strong></p>
<ol>
<li>response对象提供的Cookie操作方法只有一个添加操作add(Cookie cookie)。要想修改Cookie只能使用一个同名的Cookie来覆盖原来的Cookie，达到修改的目的。删除时只需要把maxAge修改为0即可。</li>
<li>修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。</li>
<li>从客户端读取Cookie时，包括maxAge在内的其他属性都是不可读的，也不会被提交。浏览器提交Cookie时只会提交name与value属性。maxAge属性只被浏览器用来判断Cookie是否过期。</li>
<li>服务端从request请求里获得cookie文件内容，只能获得name和value。</li>
<li>如果maxAge为0，则表示删除该Cookie。Cookie机制没有提供删除Cookie的方法，因此通过设置该Cookie即时失效实现删除Cookie的效果。失效的Cookie会被浏览器从Cookie文件或者内存中删除。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie中maxAge深入理解&quot;&gt;&lt;a href=&quot;#Cookie中maxAge深入理解&quot; class=&quot;headerlink&quot; title=&quot;Cookie中maxAge深入理解&quot;&gt;&lt;/a&gt;Cookie中maxAge深入理解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;标准
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/25/git%20merger%E4%B8%AD%E2%80%9Cboth%20deleted%E2%80%9D%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://universefeeler.github.io/2016/07/25/git merger中“both deleted”错误解决方案/</id>
    <published>2016-07-25T16:23:05.980Z</published>
    <updated>2016-07-25T14:16:09.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-merger中“both-deleted”错误解决方案"><a href="#git-merger中“both-deleted”错误解决方案" class="headerlink" title="git merger中“both deleted”错误解决方案"></a>git merger中“both deleted”错误解决方案</h1><p><strong>错误原因</strong></p>
<p>在使用git过程中，将两个分支合并时，恰巧这两个分支都删除了都一个文件或文件夹，并且是直接删除的，而不是通过git rm -r dir/删除的。将两个分支git merger 是很可能就报出“git deleted”的error，尽而导致merge失败。</p>
<p><strong>解决方案</strong></p>
<p>其实解决起来也并不困难，也就是选择一个被合并的分支执行 “git  rm -r dir/”,这个问题其实在将本地分支推到远程时也会发生，只是报的错误不一样。那么该怎么解决，自然，就是手动解决冲突喽。但是重点来了：我们无论是执行合并，还是将本地分支推到远程分支，一般都是利用git客户端来进行执行的，自然我们在进行层级找到相应的目录或文件时也都是通过那个伟大的“tab”键来自动补全找到的，但此时执行tab却并不能找到那个被删除的文件夹（都删除了，当然找不到），于是，我们像遇到坎似得不知所措了。那我们该怎么办呢？很简单，就是对那些提示“both deleted”的文件或文件夹执行“git rm -r dir/”,只不过这个路径需要我们一点点的用手打出来，而不是靠“tab”自动补全找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-merger中“both-deleted”错误解决方案&quot;&gt;&lt;a href=&quot;#git-merger中“both-deleted”错误解决方案&quot; class=&quot;headerlink&quot; title=&quot;git merger中“both deleted”错误解决方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/20/MySQL%20select%20count()%E6%9F%A5%E8%AF%A2%E8%BE%83%E6%85%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E5%AE%9E%E5%92%8C%E7%BB%93%E8%AE%BA/"/>
    <id>http://universefeeler.github.io/2016/07/20/MySQL select count()查询较慢的一些事实和结论/</id>
    <published>2016-07-20T16:31:12.069Z</published>
    <updated>2016-07-20T16:31:12.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-select-count-查询较慢的一些事实和结论"><a href="#MySQL-select-count-查询较慢的一些事实和结论" class="headerlink" title="MySQL select count()查询较慢的一些事实和结论"></a>MySQL select count()查询较慢的一些事实和结论</h1><p>title: MySQL select count()查询较慢的一些事实和结论<br>date: 2016-07-21 20:33:26<br>categories: mysql<br>tags: [mysql,优化,快捷方式] </p>
<p><strong>一些实践事实（mysql innodb）</strong></p>
<ol>
<li>在没有额外查询的条件的情况下， select count（*）、select count（id）、select count（1）的查询效率是几乎没有区别的。</li>
</ol>
<blockquote>
<p>个人亲测：分别5.6s, 5.8s, 6.2s，虽然查询时间不同，但是无质的区别，没有达到达到优化一个量级或至少性能翻倍的地步，基本是没用的。</p>
</blockquote>
<ol>
<li>以select count（*）为例，其与select * 的查询速度相比是差不多的，只是略快。</li>
</ol>
<blockquote>
<p>个人亲测：分别5.6s, 6.4s。也就是说，莫不如利用select <em> 查询出list，再进行list.size()来的有价值，因为查询出list我们可是拿到数据了；而select count（\</em>）在逻辑上更多的仅仅用于分页，一般还需另外，再去查询limit条数据。ps:不要说 limit不会加快查询速度，快是必然的，有时快很多，相对不加limit时可以快到一个量级。</p>
</blockquote>
<ol>
<li>即使添加了索引，并且该索引作为where = 条件时，若该条件的不同值很少，一样不会明显起到加快查询速度的作用。</li>
</ol>
<blockquote>
<p>例如：有表中共有200万条记录，该where = 查询条件仅有4个不同的值，那么加速作用也不明显。此时不论是 select count（*）,select count(索引)、select count（主键）。</p>
</blockquote>
<p><strong>一些外部结论</strong></p>
<ol>
<li>没有任何条件的查询不一定走的是主键索引，mysql优化器会使用认为是最小代价的索引</li>
<li>在count(*)的时候，采用主键索引比二级索引要慢，而且慢的原因不是因为两者的索引的长度不同</li>
<li>count(*)在没有查询条件的情况下，对innodb引擎的mysql会进行全表扫描，而myasm引擎的mysql无需进行全表扫描，因为myasm的引擎记录了每个表的多少记录。但是当有查询条件的时候，两者的查询效率一致。</li>
<li>经过后来查询大量的资料，主键索引count(*)的时候之所以慢</li>
</ol>
<ul>
<li>InnoDB引擎<br>[1]     数据文件和索引文件存储在一个文件中，主键索引默认直接指向数据存储位置。<br>[2]     二级索引存储指定字段的索引，实际的指向位置是主键索引。当我们通过二级索引统计数据的时候，无需扫描数据文件；而通过主键索引统计数据时，由于主键索引与数据文件存放在一起，所以每次都会扫描数据文件，所以主键索引统计没有二级索引效率高。<br>[3]     由于主键索引直接指向实际数据，所以当我们通过主键id查询数据时要比通过二级索引查询数据要快。</li>
<li>MyAsm引擎<br>[1]     该引擎把每个表都分为几部分存储，比如用户表，包含user.frm，user.MYD和user.MYI。<br>[2]     User.frm负责存储表结构<br>[3]     User.MYD负责存储实际的数据记录，所有的用户记录都存储在这个文件中<br>[4]     User.MYI负责存储用户表的所有索引，这里也包括主键索引。</li>
</ul>
<ol>
<li>MyAsm引擎不支持事务处理，没有仔细深入研究。两种引擎各有自己的使用场景，每个引擎的特点也不尽相同，感兴趣的你可以再仔细深入研究。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL-select-count-查询较慢的一些事实和结论&quot;&gt;&lt;a href=&quot;#MySQL-select-count-查询较慢的一些事实和结论&quot; class=&quot;headerlink&quot; title=&quot;MySQL select count()查询较慢的一些事实和
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/20/Java%E6%B7%BB%E5%8A%A0%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E8%8E%B7%E5%8F%96Cookie/"/>
    <id>http://universefeeler.github.io/2016/07/20/Java添加、删除、获取Cookie/</id>
    <published>2016-07-20T14:18:12.695Z</published>
    <updated>2016-07-19T15:36:13.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java添加、删除、获取Cookie"><a href="#Java添加、删除、获取Cookie" class="headerlink" title="Java添加、删除、获取Cookie"></a>Java添加、删除、获取Cookie</h1><ol>
<li><strong>添加Cookie</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, <span class="string">"aotori"</span>);       <span class="comment">//(key,value)</span></div><div class="line">    cookie.setPath(<span class="string">"/"</span>);<span class="comment">// 这个要设置</span></div><div class="line">    <span class="comment">// cookie.setDomain(".aotori.com");//这样设置，能实现两个网站共用</span></div><div class="line">	 cookie.setMaxAge(<span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);<span class="comment">// 不设置的话，则cookies不写入硬盘,而是写在内存,只在当前页面有用,以秒为单位</span></div><div class="line">    response.addCookie(cookie);         <span class="comment">//添加第一个Cookie</span></div><div class="line">    cookie = <span class="keyword">new</span> Cookie(<span class="string">"nick"</span>, URLEncoder.encode(<span class="string">"陈强"</span>, <span class="string">"UTF-8"</span>));</div><div class="line">    cookie.setPath(<span class="string">"/"</span>);</div><div class="line">    <span class="comment">// cookie.setDomain(".aotori.com");</span></div><div class="line">    cookie.setMaxAge(<span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line">   response.addCookie(cookie);          <span class="comment">//添加第二个Cookie</span></div></pre></td></tr></table></figure>
<ol>
<li><strong>读取Cookie</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Cookie cookies[] = request.getCookies();</div><div class="line">   System.out.println(<span class="string">"Cookie长度:"</span> + cookies.length);        <span class="comment">//读取本机共存在多少COOKIE</span></div><div class="line">   <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</div><div class="line">     <span class="keyword">if</span> (cookies[i].getName().equals(<span class="string">"nick"</span>)) &#123;</div><div class="line">         System.out.println(<span class="string">"For 内部Cookie"</span> + URLDecoder.decode(cookies[i].getValue(), <span class="string">"UTF-8"</span>));</div><div class="line">     &#125;</div><div class="line">    &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">    System.out.println(<span class="string">"没有Cookie"</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>删除Cookie</strong></li>
</ol>
<blockquote>
<pre><code>对COOKIE进行删除操作, 只需将该COOKIE对象使用setMaxAge(0)法
</code></pre></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Cookie cookies[] = request.getCookies();</div><div class="line">     <span class="keyword">if</span> (cookies != <span class="keyword">null</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++)</div><div class="line">         &#123;</div><div class="line">             <span class="keyword">if</span> (cookies[i].getName().equals(<span class="string">"nick"</span>))</div><div class="line">             &#123;</div><div class="line">                 Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"nick"</span>,<span class="string">"ww"</span>);<span class="comment">//这边得用"",不能用null</span></div><div class="line">                 cookie.setPath(<span class="string">"/"</span>);<span class="comment">//设置成跟写入cookies一样的</span></div><div class="line">                <span class="comment">// cookie.setDomain(".wangwz.com");//设置成跟写入cookies一样的</span></div><div class="line">                 cookie.setMaxAge(<span class="number">0</span>);</div><div class="line">                 response.addCookie(cookie);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java添加、删除、获取Cookie&quot;&gt;&lt;a href=&quot;#Java添加、删除、获取Cookie&quot; class=&quot;headerlink&quot; title=&quot;Java添加、删除、获取Cookie&quot;&gt;&lt;/a&gt;Java添加、删除、获取Cookie&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/13/%E5%95%86%E4%B8%9A%E7%A2%8E%E7%89%87%E6%8D%95%E6%89%8B%E2%80%94%E3%80%8A%E6%98%9F%E5%B7%B4%E5%85%8B%E4%B8%80%E5%88%87%E4%B8%8E%E5%92%96%E5%95%A1%E6%97%A0%E5%85%B3%E3%80%8B%E6%80%9D%E7%B4%A2/"/>
    <id>http://universefeeler.github.io/2016/07/13/商业碎片捕手—《星巴克一切与咖啡无关》思索/</id>
    <published>2016-07-13T15:56:13.404Z</published>
    <updated>2016-07-11T14:02:18.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商业碎片捕手—《星巴克一切与咖啡无关》思索"><a href="#商业碎片捕手—《星巴克一切与咖啡无关》思索" class="headerlink" title="商业碎片捕手—《星巴克一切与咖啡无关》思索"></a>商业碎片捕手—《星巴克一切与咖啡无关》思索</h1><p>@(默认笔记)[商业笔记, 读书, 微信公众号运营]</p>
<p><strong>前言</strong><br>        世间的工作，平凡如尘土<br>        你为它劳心，它却弄污你的顺手<br>        最终又华为乌有。</p>
<blockquote>
<p>星巴克的精髓：没有人，就没有咖啡<br>霍华德.毕哈来公司第一天就告诉我们：我们不是在经营那种卖咖啡给客人的生意，我们是在一项提供咖啡的人的生意<br>霍华德一直在证明一项的伟大的事业必须具备良心和利他<br>领导他人表面是一种荣誉，本质上是一种责任</p>
</blockquote>
<ul>
<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>
<li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li>
<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;商业碎片捕手—《星巴克一切与咖啡无关》思索&quot;&gt;&lt;a href=&quot;#商业碎片捕手—《星巴克一切与咖啡无关》思索&quot; class=&quot;headerlink&quot; title=&quot;商业碎片捕手—《星巴克一切与咖啡无关》思索&quot;&gt;&lt;/a&gt;商业碎片捕手—《星巴克一切与咖啡无关》思索&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/13/jQuery.find()%20%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://universefeeler.github.io/2016/07/13/jQuery.find() 函数详解/</id>
    <published>2016-07-13T15:56:13.392Z</published>
    <updated>2016-07-11T15:28:20.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-find-函数详解"><a href="#jQuery-find-函数详解" class="headerlink" title="jQuery.find() 函数详解"></a>jQuery.find() 函数详解</h1><blockquote>
<p>find()函数用于选取每个匹配元素的符合指定表达式的后代元素，并以jQuery对象的形式返回。这里的表达式包括：选择器(字符串)、DOM元素(Element)、jQuery对象。该函数属于jQuery对象(实例)。</p>
</blockquote>
<ul>
<li>语法<br>jQueryObject.find( expr )</li>
<li>参数<br>expr    String/Element/jQuery类型指定的表达式。<br>find()函数将在当前jQuery对象每个匹配元素的所有后代元素中筛选符合指定表达式的元素。<br>如果expr参数为字符串，则将其视作jQuery选择器，用以表示该选择器所匹配的元素。<br>jQuery 1.6 新增支持：参数expr可以为DOM元素(Element)或jQuery对象。</li>
<li>返回值<br>find()函数的返回值为jQuery类型，返回一个新的jQuery对象，该对象封装了当前jQuery对象匹配元素的所有符合指定选择器的后代元素。<br>如果没有匹配的元素，则返回空的jQuery对象。</li>
<li>示例&amp;说明<br>find()函数具有以下等价代码：<br>// 这里的是selector、selector1均表示任意的选择器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;selector&quot;).find(&quot;selector1&quot;);</div></pre></td></tr></table></figure>
<p>// 等价于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;selector selector1&quot;);</div></pre></td></tr></table></figure>
<p>以下面这段HTML代码为例：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;p id="e1"&gt;</div><div class="line">	&lt;span id="e2" class="site"&gt;</div><div class="line">		&lt;span id="e3" class="item site-name"&gt;CodePlayer&lt;/span&gt;</div><div class="line">		&lt;span id="e4" class="item site-desc"&gt;专注于编程开发技术分享&lt;/span&gt;</div><div class="line">	&lt;/span&gt;</div><div class="line">	&lt;span id="e5" class="site-url"&gt;http://www.365mini.com&lt;/span&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;p id="e6"&gt;</div><div class="line">	JavaScript&lt;span id="e7" class="highlight"&gt;jQuery&lt;/span&gt;</div><div class="line">	&lt;a id="e8" href="http://www.365mini.com"&gt;CodePlayer&lt;/a&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>以下jQuery示例代码用于演示find()函数的具体用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 返回jQuery对象所有匹配元素的标识信息数组</div><div class="line">// 每个元素形如：tagName或tagName#id(如果有id的话)</div><div class="line">function getTagsInfo($doms)&#123;</div><div class="line">	return $doms.map(function()&#123;</div><div class="line">		return this.tagName + (this.id ? &quot;#&quot; + this.id : &quot;&quot;);</div><div class="line">	&#125;).get();</div><div class="line">&#125;</div><div class="line">// 匹配id为e1的元素</div><div class="line">var $e1 = $(&quot;#e1&quot;);</div><div class="line">var $e1_span = $e1.find(&quot;span&quot;);</div><div class="line">document.writeln( getTagsInfo( $e1_span ) ); // SPAN#e2,SPAN#e3,SPAN#e4,SPAN#e5</div><div class="line"></div><div class="line">var $p = $(&quot;p&quot;);</div><div class="line">var $p_span = $p.find(&quot;span&quot;);</div><div class="line">document.writeln( getTagsInfo( $p_span ) ); // SPAN#e2,SPAN#e3,SPAN#e4,SPAN#e5,SPAN#e7</div><div class="line"></div><div class="line">var $highlight = $p.find( $(&quot;.highlight&quot;) );</div><div class="line">document.writeln( getTagsInfo( $highlight ) ); // SPAN#e7</div><div class="line"></div><div class="line">var a = document.getElementsByTagName(&quot;a&quot;);</div><div class="line">var $a = $p.find( a );</div><div class="line">document.writeln( getTagsInfo( $a ) ); // A#e8</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-find-函数详解&quot;&gt;&lt;a href=&quot;#jQuery-find-函数详解&quot; class=&quot;headerlink&quot; title=&quot;jQuery.find() 函数详解&quot;&gt;&lt;/a&gt;jQuery.find() 函数详解&lt;/h1&gt;&lt;blockquote&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/13/jQuery%E7%9A%84$%E7%AC%A6%E5%8F%B7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://universefeeler.github.io/2016/07/13/jQuery的$符号详解/</id>
    <published>2016-07-13T15:56:13.392Z</published>
    <updated>2016-07-11T15:40:58.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery的-符号详解"><a href="#jQuery的-符号详解" class="headerlink" title="jQuery的$符号详解"></a>jQuery的$符号详解</h1><blockquote>
<p>jQuery是现在最流行的Javascript框架，<br>\$是其中最常见的符号，已经在jQuery留下了深深的烙印。那么\$到底是什么东西，它可以接受一个字符，也可以接受一个文档对象，亦或者一个函数，也可以调用一个函数。</p>
</blockquote>
<p>jQuery，高效，精炼，特别是对DOM元素对象操作的简化，很大程度上将前端程序员从一大堆冗余的代码解放出来，大大提高了开发效率！对多浏览器的兼容性，也最大限度让程序员摆脱各种bug的纠缠<br>\$符号作为元素选择器的简写，最早是由Prototype库使用，来简写getElementById，jQuery沿袭这一理念，并发扬光大，使\$符号成为了jQuery最别具一格的特点。那么在jQuery中，\$符号到底是啥？<br>熟悉jQuery的人应该知道，几乎jQuery所有操作，都是从$符号开始，当作为元素选择器的时候，操作结果返回的是一个jQuery对象。<br>那么，现在就看jQuery类的构造函数的主要代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">1.	var jQuery = (function() &#123;  </div><div class="line">2.	    //创建jQuery对象,给所有的jQuery方法提供统一的入口,避免繁琐难记  </div><div class="line">3.	    var jQuery = function( selector, context ) &#123;  </div><div class="line">4.	        //jQuery的构造对象,调用了jQuery.fn.init方法  </div><div class="line">5.	        //最后返回jQuery.fn.init的对象  </div><div class="line">6.	        return new jQuery.fn.init( selector, context, rootjQuery );  </div><div class="line">7.	    &#125;,  </div><div class="line">8.	  </div><div class="line">9.	    .....  </div><div class="line">10.	  </div><div class="line">11.	    //定义jQuery的原型,jQuery.fn指向jQuery.prototype对象  </div><div class="line">12.	    jQuery.fn = jQuery.prototype = &#123;  </div><div class="line">13.	    //重新指定构造函数属性,因为默认指向jQuery.fn.init  </div><div class="line">14.	    constructor: jQuery,  </div><div class="line">15.	    init: function( selector, context, rootjQuery ) &#123;.....&#125;,  </div><div class="line">16.	  </div><div class="line">17.	    ......  </div><div class="line">18.	   </div><div class="line">21.	    ......  </div><div class="line">22.	  </div><div class="line">23.	    //返回jQuery变量,同时定义将全局变量window.jQuery和window.$指向jQuery  </div><div class="line">24.	    return (window.jQuery = window.$ = jQuery);  </div><div class="line">25.	  </div><div class="line">26.	&#125;)();  </div><div class="line"></div><div class="line">19.	    &#125;</div></pre></td></tr></table></figure>
<p>从以上jQuery的主体结构，我们可以看出，当首次执行完毕后，全局变量\$和jQuery，都是指向了var jQuery=function（selector，context）{}这个函数，这里，就可以下个结论，$\$就是jQuery的别名，实际调用jQuery.fn.init。$<br>再看看var jQuery=function（selector，context）{}这个构造函数，为什么里面不直接返回jQuery的对象？而是调用另外一个方法呢？<br>假如直接返回对象的话，每次使用jQuery对象，都要new jQuery() 这样的话，十分不方便，直接将new 这个操作封装在jQuery构造函数里面，简化了实例化的操作，同时，jQuery通过了jQuery或者$符号，统一了接口，方便代码的编写，化繁为简，提高效率。<br>那么jQuery类具体是如何构造的？<br>下面代码可以清晰展示整个过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">*所有查找或生成元素的结果，封装为jQuery对象数组返回. </div><div class="line">2.	    */  </div><div class="line">3.	    init: function( selector, context, rootjQuery ) &#123;  </div><div class="line">4.	        var match, elem, ret, doc;  </div><div class="line">5.	  </div><div class="line">6.	        // 1)处理 $(&quot;&quot;), $(null), or $(undefined)  </div><div class="line">7.	        //this指向jQuery对象  </div><div class="line">8.	        if ( !selector ) &#123;  </div><div class="line">9.	            return this;  </div><div class="line">10.	        &#125;  </div><div class="line">11.	  </div><div class="line">12.	        // 2)处理 $(DOMElement)  </div><div class="line">13.	        //selector.nodeType得知为DOM元素,如果是DOM元素直接放进jQuery对象数组中  </div><div class="line">14.	        if ( selector.nodeType ) &#123;  </div><div class="line">15.	            this.context = this[0] = selector;  </div><div class="line">16.	            this.length = 1;  </div><div class="line">17.	            return this;  </div><div class="line">18.	        &#125;  </div><div class="line">19.	  </div><div class="line">20.	        //3)body元素只出现一次, 优化查找  </div><div class="line">21.	        if ( selector === &quot;body&quot; &amp;&amp; !context &amp;&amp; document.body ) &#123;  </div><div class="line">22.	            this.context = document;  </div><div class="line">23.	            this[0] = document.body;  </div><div class="line">24.	            this.selector = &quot;body&quot;;  </div><div class="line">25.	            this.length = 1;  </div><div class="line">26.	            return this;  </div><div class="line">27.	        &#125;  </div><div class="line">28.	  </div><div class="line">29.	        //4)如果是字符串,有六种情况,  </div><div class="line">30.	        /* </div><div class="line">31.	        *(1)单个html元素 不带属性对象字面量 ：createElement + merge </div><div class="line">32.	        *(2)单个html元素 带属性对象字面量 ：createElement + attr + merge </div><div class="line">33.	        *(3)多个html元素  ：buildFragment + merge </div><div class="line">34.	        *(4)#id 不带context   ：getElementById或者getElementById + Sizzle </div><div class="line">35.	        *(5)#id 带context ：Sizzle </div><div class="line">36.	        *(6)experession string ：Sizzle </div><div class="line">37.	        *(7)标签选择器 ：Sizzle（内置getElementByTagName） </div><div class="line">38.	        */  </div><div class="line">39.	        if ( typeof selector === &quot;string&quot; ) &#123;  </div><div class="line">40.	            // 判断是否为HTML string 还是 ID  </div><div class="line">41.	            //如果是HTML strings  match[1] 非空  </div><div class="line">42.	            //如果是ID strings match[1] 空  </div><div class="line">43.	            //quickExpr = /^(?:[^&lt;]*(&lt;[\w\W]+&gt;)[^&gt;]*$|#([\w\-]+)$)/,  </div><div class="line">44.	            match = quickExpr.exec( selector );  </div><div class="line">45.	  </div><div class="line">46.	            // 分析匹配结果，且当#id没有context参数，例如不是$(&apos;#xxx&apos;,xxx)  </div><div class="line">47.	            if ( match &amp;&amp; (match[1] || !context) ) &#123;  </div><div class="line">48.	  </div><div class="line">49.	                // 处理HTML字符 $(html) -&gt; $(array)  </div><div class="line">50.	                if ( match[1] ) &#123;  </div><div class="line">51.	                    //如果context为jQuery对象，则取用第一个元素，即是context[0]  </div><div class="line">52.	                    context = context instanceof jQuery ? context[0] : context;  </div><div class="line">53.	                    //取得document文档  </div><div class="line">54.	                    doc = (context ? context.ownerDocument || context : document);  </div><div class="line">55.	  </div><div class="line">56.	                    //判断是否为单个元素字符串  </div><div class="line">57.	                    ret = rsingleTag.exec( selector );  </div><div class="line">58.	                    //单个元素  </div><div class="line">59.	                    if ( ret ) &#123;  </div><div class="line">60.	                        //带对象属性字面量  </div><div class="line">61.	                        //检查context是否为对象字面量,适用场景  </div><div class="line">62.	                        //例如$(&apos;&lt;div&gt;&apos;, &#123; &apos;id&apos;: &apos;test&apos;, &apos;class&apos;: &apos;test&apos; &#125;);  </div><div class="line">63.	                        if ( jQuery.isPlainObject( context ) ) &#123;  </div><div class="line">64.	                            selector = [ document.createElement( ret[1] ) ];  </div><div class="line">65.	                            jQuery.fn.attr.call( selector, context, true );  </div><div class="line">66.	  </div><div class="line">67.	                        &#125; else &#123;  </div><div class="line">68.	                        //不带对象字面量  </div><div class="line">69.	                        //例如$(&apos;&lt;div&gt;&apos;)  </div><div class="line">70.	                            selector = [ doc.createElement( ret[1] ) ];  </div><div class="line">71.	                        &#125;  </div><div class="line">72.	  </div><div class="line">73.	                    &#125; else &#123;  </div><div class="line">74.	                        //如果是多个元素字符串，例如$(&apos;&lt;div&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;&apos;)  </div><div class="line">75.	                        ret = jQuery.buildFragment( [ match[1] ], [ doc ] );  </div><div class="line">76.	                        selector = (ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment).childNodes;  </div><div class="line">77.	                    &#125;  </div><div class="line">78.	                    //将生成结果selector 合并到jQuery对象中  </div><div class="line">79.	                    return jQuery.merge( this, selector );  </div><div class="line">80.	  </div><div class="line">81.	                // 处理$(&quot;#id&quot;),例如$(&quot;#xxx&quot;);  </div><div class="line">82.	                &#125; else &#123;  </div><div class="line">83.	                    elem = document.getElementById( match[2] );  </div><div class="line">84.	  </div><div class="line">85.	                    if ( elem &amp;&amp; elem.parentNode ) &#123;  </div><div class="line">86.	                        //处理IE和Opera ID 与 Name 混淆的bug,使用Sizzle查找  </div><div class="line">87.	                        if ( elem.id !== match[2] ) &#123;  </div><div class="line">88.	                            return rootjQuery.find( selector );  </div><div class="line">89.	                        &#125;  </div><div class="line">90.	  </div><div class="line">91.	                        // 否则，简单插入jQuery对象数组  </div><div class="line">92.	                        this.length = 1;  </div><div class="line">93.	                        this[0] = elem;  </div><div class="line">94.	                    &#125;  </div><div class="line">95.	  </div><div class="line">96.	                    this.context = document;  </div><div class="line">97.	                    this.selector = selector;  </div><div class="line">98.	                    return this;  </div><div class="line">99.	                &#125;  </div><div class="line">100.	  </div><div class="line">101.	            // 处理 $(expr, $(...))，使用Sizzle查找，例如$(&quot;div&quot;),$(&apos;div &gt; a&apos;),$(&apos;div,a&apos;),$(&apos;div:first&apos;)  </div><div class="line">102.	            &#125; else if ( !context || context.jquery ) &#123;  </div><div class="line">103.	                return (context || rootjQuery).find( selector );  </div><div class="line">104.	  </div><div class="line">105.	            // 处理: $(expr, context),例如$(&apos;div a&apos;);或者$(&apos;a&apos;,&apos;div&apos;)或者$(&apos;div&apos;).find(&apos;a&apos;);  </div><div class="line">106.	            &#125; else &#123;  </div><div class="line">107.	                return this.constructor( context ).find( selector );  </div><div class="line">108.	            &#125;  </div><div class="line">109.	  </div><div class="line">110.	        //5)处理: $(function),设置DOM载的时候绑定的函数,等同于$().ready()&#123;foo&#125;  </div><div class="line">111.	        &#125; else if ( jQuery.isFunction( selector ) ) &#123;  </div><div class="line">112.	            return rootjQuery.ready( selector );  </div><div class="line">113.	        &#125;  </div><div class="line">114.	        //6)处理：$($(...))，完成克隆jQuery对象的简单参数，具体由makeArray完成  </div><div class="line">115.	        if (selector.selector !== undefined) 完成加&#123;  </div><div class="line">116.	            this.selector = selector.selector;  </div><div class="line">117.	            this.context = selector.context;  </div><div class="line">118.	        &#125;  </div><div class="line">119.	        //使用makeArray，为jQuery对象添加元素,例如$([1,2]);  </div><div class="line">120.	        return jQuery.makeArray( selector, this );  </div><div class="line">121.	    &#125;,</div></pre></td></tr></table></figure>
<p>\$符号，其实是对jQuery类构造函数的引用，此函数实际调用了jQuery.fn.init(即是jQuery.prototype.init)来生成jQuery对象,其中jQuery.prototype的所有方法都被jQuery的对象继承。\$.func实际是jQuery类的静态方法，所以$即是jQuery类的构造函数，支持各种条件的查找和生成并返回DOM对象构成jQuery对象，同时也是一个类，是所有jQuery静态方法的入口，例如可以使用个\$.ajax()。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery的-符号详解&quot;&gt;&lt;a href=&quot;#jQuery的-符号详解&quot; class=&quot;headerlink&quot; title=&quot;jQuery的$符号详解&quot;&gt;&lt;/a&gt;jQuery的$符号详解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;jQuery是现在最流行的Java
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/13/jquery%E7%9A%84$(%E2%80%9C#id%E2%80%9D)%E4%B8%8Edocument.getElementById(%E2%80%9Cid%E2%80%9D)%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://universefeeler.github.io/2016/07/13/jquery的$(“#id”)与document.getElementById(“id”)的区别/</id>
    <published>2016-07-13T15:56:13.392Z</published>
    <updated>2016-07-11T15:43:08.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jquery的-“-id”-与document-getElementById-“id”-的区别"><a href="#jquery的-“-id”-与document-getElementById-“id”-的区别" class="headerlink" title="jquery的$(“#id”)与document.getElementById(“id”)的区别"></a>jquery的$(“#id”)与document.getElementById(“id”)的区别</h1><ol>
<li>alert($(“#box”))得到的是[object Object]</li>
<li>alert(document.getElementByIdx_x(“box”))得到的是[object HTMLDivElement]</li>
<li>alert(\$(“#box”)[0])或alert(\$(“#box”).get(0))得到的是[object HTMLDivElement]</li>
</ol>
<p>因此document.getElementByIdx_x(“box”)等同于(\$(“#box”)[0]或(\$(“#box”).get(0)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jquery的-“-id”-与document-getElementById-“id”-的区别&quot;&gt;&lt;a href=&quot;#jquery的-“-id”-与document-getElementById-“id”-的区别&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/13/Grep%E5%BA%94%E7%94%A8%E5%87%A0%E4%BE%8B/"/>
    <id>http://universefeeler.github.io/2016/07/13/Grep应用几例/</id>
    <published>2016-07-13T15:53:41.722Z</published>
    <updated>2016-07-13T15:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grep应用几例"><a href="#Grep应用几例" class="headerlink" title="Grep应用几例"></a>Grep应用几例</h1><ol>
<li><strong>获取log.txt文件中各”appid=”的值</strong><br>log.txt内容如下：<br><img src="./2016-07-13_234805.jpg" alt="Alt text"></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -o &apos;appid=[0-9]\+&apos; log.txt | grep -o &apos;[0-9]\+&apos;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -o &apos;appid=[0-9]*&apos; log.txt | grep -o &apos;[0-9]*&apos;</div></pre></td></tr></table></figure>
<p>具体操作实例如下：<br><img src="./2016-07-13_234745.jpg" alt="Alt text"></p>
<ol>
<li>获取df -h磁盘利用率大于等于10%的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h | grep -o [0-9]*% | grep -o [0-9][0-9]</div></pre></td></tr></table></figure>
<p>具体操作实例：<br><img src="./2016-07-13_233056.jpg" alt="Alt text"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Grep应用几例&quot;&gt;&lt;a href=&quot;#Grep应用几例&quot; class=&quot;headerlink&quot; title=&quot;Grep应用几例&quot;&gt;&lt;/a&gt;Grep应用几例&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;获取log.txt文件中各”appid=”的值&lt;/strong&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://universefeeler.github.io/2016/07/11/$.ajax()%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://universefeeler.github.io/2016/07/11/$.ajax()方法详解/</id>
    <published>2016-07-11T14:33:56.430Z</published>
    <updated>2016-07-11T14:24:24.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ajax-方法详解"><a href="#ajax-方法详解" class="headerlink" title="$.ajax()方法详解"></a>$.ajax()方法详解</h1><p>###$.ajax()参数解释</p>
<ol>
<li><strong>url:</strong><br>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</li>
<li><strong>type:</strong><br>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</li>
<li><strong>timeout:</strong><br>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</li>
<li><strong>async:</strong><br>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</li>
<li><strong>cache:</strong><br>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</li>
<li><strong>data:</strong><br>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</li>
<li><strong>dataType:</strong><br>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</li>
<li><strong>beforeSend：</strong><br>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。<pre><code>function(XMLHttpRequest){
   this;   //调用本次ajax请求时传递的options参数
}
</code></pre></li>
<li><strong>complete：</strong><br>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。<pre><code>function(XMLHttpRequest, textStatus){
   this;    //调用本次ajax请求时传递的options参数
}
</code></pre></li>
<li><strong>success：</strong><br>要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。<br>   (1)由服务器返回，并根据dataType参数进行处理后的数据。<br>   (2)描述状态的字符串。<br>   function(data, textStatus){<pre><code>//data可能是xmlDoc、jsonObj、html、text等等
this;  //调用本次ajax请求时传递的options参数
</code></pre>   }</li>
<li><strong>error:</strong><br>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：<br>   function(XMLHttpRequest, textStatus, errorThrown){<pre><code>//通常情况下textStatus和errorThrown只有其中一个包含信息
this;   //调用本次ajax请求时传递的options参数
</code></pre>   }</li>
<li><strong>contentType：</strong><br>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。<br>13.dataFilter：<br>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<pre><code>function(data, type){
    //返回处理后的数据
    return data;
}
</code></pre></li>
<li><strong>dataFilter：</strong><br>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<pre><code>function(data, type){
    //返回处理后的数据
    return data;
}
</code></pre></li>
<li><strong>global：</strong><br>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。<br>16.ifModified：<br>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</li>
<li><strong>jsonp：</strong><br>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</li>
<li><strong>username：</strong><br>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。<br>19.password：<br>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</li>
<li><strong>processData：</strong><br>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</li>
<li><strong>scriptCharset：</strong><br>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</li>
</ol>
<p>###案例说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">    $(&apos;#send&apos;).click(function()&#123;</div><div class="line">         $.ajax(&#123;</div><div class="line">             type: &quot;GET&quot;,</div><div class="line">             url: &quot;test.json&quot;,</div><div class="line">             data: &#123;username:$(&quot;#username&quot;).val(), content:$(&quot;#content&quot;).val()&#125;,</div><div class="line">             dataType: &quot;json&quot;,</div><div class="line">             success: function(data)&#123;</div><div class="line">                         $(&apos;#resText&apos;).empty();   //清空resText里面的所有内容</div><div class="line">                         var html = &apos;&apos;; </div><div class="line">                         $.each(data, function(commentIndex, comment)&#123;</div><div class="line">                               html += &apos;&lt;div class=&quot;comment&quot;&gt;&lt;h6&gt;&apos; + comment[&apos;username&apos;]</div><div class="line">                                         + &apos;:&lt;/h6&gt;&lt;p class=&quot;para&quot;&apos; + comment[&apos;content&apos;]</div><div class="line">                                         + &apos;&lt;/p&gt;&lt;/div&gt;&apos;;</div><div class="line">                         &#125;);</div><div class="line">                         $(&apos;#resText&apos;).html(html);</div><div class="line">                      &#125;</div><div class="line">         &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>ps:</strong><br>$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ajax-方法详解&quot;&gt;&lt;a href=&quot;#ajax-方法详解&quot; class=&quot;headerlink&quot; title=&quot;$.ajax()方法详解&quot;&gt;&lt;/a&gt;$.ajax()方法详解&lt;/h1&gt;&lt;p&gt;###$.ajax()参数解释&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong
    
    </summary>
    
    
  </entry>
  
</feed>
